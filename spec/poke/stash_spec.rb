require 'spec_helper'
require 'poke/stash'
require 'poke/rack_tools'

module Poke
  describe Stash do
    Given { Item.store = {} }
    Given(:status)  { OpenStruct.new RackTools::STATUS_MAP }
    Given(:stash)   { described_class.new                  }

    Given(:path)    { '/abc123'      }
    Given(:content) { 'some content' }
    Given(:env) do
      {
        'PATH_INFO'      => path,
        'REQUEST_METHOD' => method
      }
    end
    Given(:item_properties) do
      { content_type: 'test/plain',
        content:      [ content ] }
    end

    When(:result) { stash.call env }

    describe 'GET' do
      Given(:method) { 'GET' }

      context 'item not in datastore' do
        Then { result.first == status.not_found }
      end

      context 'item IS in datastore' do
        Given { Item[path] = item_properties }
        Then { result == [ status.ok, { 'Content-Type' => 'test/plain' }, [ content ] ] }
      end
    end

    describe 'POST' do
      Given(:method) { 'POST' }
      Given { env['CONTENT_TYPE'] = 'test/plain' }

      context 'item not in datastore' do
        Given { env['rack.input']   = StringIO.new content }

        describe 'with client-provided item_id' do
          Given(:path) { '/ABC123' }

          describe 'now stored' do
            Then { Item[path].content == [ content ] }
            Then { result.first == status.created }
          end

          describe 'response has URL for item' do
            Given(:path) { '/another_path' }
            Then { result.last == [ { "path" => path, "Content-Type" => 'test/plain' }.to_json ] }
            Then { result.first == status.created }
          end
        end

        describe 'without client-provided item_id' do
          Given(:path) { '/item' }
          When(:autogenerated_item_id) { JSON.parse(result.last.last)["path"] }

          Then { autogenerated_item_id != '/item' }
          Then { Item[autogenerated_item_id].content == [ content ] }
          Then { result.first == status.created }
        end
      end

      context 'item is in datastore' do
        Given { Item[path] = item_properties }
        Given { env['rack.input'] = StringIO.new 'some other content' }
        Then  { Item[path].content == [ content ] }
        Then  { result.first == status.forbidden }
      end
    end

  end
end
